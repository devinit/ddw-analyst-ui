name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Force fail to skip test
      run: exit 1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        architecture: 'x64'

    - name: Install dependencies
      run: |
        npm config set '@bit:registry' https://node.bit.dev
        npm install --ignore-scripts
        npm install -g codecov
        pip3 install --user codecov

    - name: Run docker build
      run: |
        docker volume create --name=metadata
        docker-compose up -d --build

    - name: Run tests
      run: |
        npm run lint
        npm run coverage
      env:
        CI: true

  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    if:
      contains('
        refs/heads/fix/auto-deploy
      ', github.ref) || startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v2
    - name: Set env for develop branch
      if: endsWith(github.ref, '/fix/auto-deploy')
      run: |
        echo "::set-env name=HOST::${{ secrets.DEV_HOST }}"
        echo "::set-env name=USERNAME::${{ secrets.DEV_USER }}"

    - name: Set env for release branch
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "::set-env name=HOST::${{ secrets.PROD_HOST }}"
        echo "::set-env name=USERNAME::${{ secrets.PROD_USER }}"

    - name: Get the release version
      if: startsWith(github.ref, 'refs/tags/v')
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: copy deploy script to server
      if: endsWith(github.ref, '/fix/auto-deploy')
      uses: appleboy/scp-action@master
      env:
        HOST: ${{ env.HOST }}
        USERNAME: ${{ env.USERNAME }}
        PORT: ${{ secrets.PORT }}
        KEY: ${{ secrets.KEY }}
      with:
        source: "deploy_script.sh"
        target: "."

    - name: copy deploy script to server
      if: startsWith(github.ref, 'refs/tags/v')
      uses: appleboy/scp-action@master
      env:
        HOST: ${{ env.HOST }}
        USERNAME: ${{ env.USERNAME }}
        PORT: ${{ secrets.PORT }}
        KEY: ${{ secrets.KEY }}
      with:
        source: "deploy.sh"
        target: "."

    - name: ssh into remote dev server
      if: endsWith(github.ref, '/fix/auto-deploy')
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.HOST }}
        username: ${{ env.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
          chmod 700 "deploy_script.sh"
          ./deploy_script.sh

    - name: ssh into remote production server
      if: startsWith(github.ref, 'refs/tags/v')
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.HOST }}
        username: ${{ env.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
          version=$(echo ${{ steps.get_version.outputs.VERSION }} | cut -c 2-)
          chmod 700 "deploy.sh"
          ./deploy.sh $version

    - name: Build JS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.HOST }}
        username: ${{ env.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd ~/ddw-analyst-ui
          npm ci
          npm run build
